name: Dependabot PR changeset
description: Add/update changeset files for Dependabot PR.
  This action is used in the context of a pull request created by Dependabot.
  It creates a changeset files in the `.changeset` directory.

inputs:
  token:
    required: false
    description: "GitHub token"
  updated-dependencies-json:
    required: true
    description: "JSON string with updated dependencies from dependabot/fetch-metadata action"
  version-update-map:
    required: false
    description: "Map version updates from dependabot/fetch-metadata action to changeset types"
    default: '{"semver-patch": "patch", "semver-minor": "patch", "semver-major": "patch"}'
outputs:
  updated-dependencies-json:
    description: "Json array of updated dependencies"
    value: ${{ steps.metadata.outputs.updated-dependencies-json }}
  changesets-json:
    description: "Json array of changeset files created or updated"
    value: ${{ steps.generate-changesets.outputs.changesets-json }}

runs:
  using: "composite"
  steps:
    - id: generate-changesets
      if: steps.find-comment.outputs.comment-id == ''
      shell: bash
      run: |
        declare changesets_json="[]"
        # loop through updated-dependencies-json array
        for dep in $(echo ${{ inputs.updated-dependencies-json }} | jq -r '.[] | @base64'); do
          _jq() {
            echo ${dep} | base64 --decode | jq -r ${1}
          }
          PKG_DIR=$(_jq '.directory')
          PKG_DIR=${PKG_DIR:1}
          if [ -z "$PKG_DIR" ]; then
            # if PKG_DIR is empty, set it to the current directory
            PKG_DIR="."
          fi
          PKG_JSON="$PKG_DIR/package.json"
          PKG_NAME=$(jq -r '.name' $PKG_JSON)
          DEP_NAME=$(_jq '.dependencyName')
          DEP_PREV_VERSION=$(_jq '.prevVersion')
          DEP_NEW_VERSION=$(_jq '.newVersion')
          DEP_DEPENDENCY_TYPE=$(_jq '.dependencyType')
          DEP_UPDATE_TYPE=$(_jq '.updateType') 
          DEP_SEMVER_TYPE=$(echo $DEP_UPDATE_TYPE | cut -d':' -f2)
          DEP_CHANGESET_TYPE=$(echo ${{ tojson(inputs.version-update-map) }} | jq -r --arg semver_type "$DEP_SEMVER_TYPE" '.[$semver_type]')
          # replace / with - in DEP_NAME
          DEP_NAME_CHANGESET=${DEP_NAME//\//-}
          if [ "$PKG_DIR" = "." ]; then
            CHANGESET_FILE="./.changeset/${PKG_NAME}-${DEP_NAME_CHANGESET}-${{ github.event.number }}.md"
          else
            # replace / with - in PKG_DIR
            PKG_DIR_CHANGESET=${PKG_DIR//\//-}
            CHANGESET_FILE="./.changeset/${PKG_DIR_CHANGESET}-${PKG_NAME}-${DEP_NAME_CHANGESET}-${{ github.event.number }}.md"
          fi
          # Always overwrite changeset file in the beginning - '>' will create the file if it doesn't exist
          echo "---" > $CHANGESET_FILE
          echo "$PKG_NAME: $DEP_CHANGESET_TYPE" >> $CHANGESET_FILE
          echo "---" >> $CHANGESET_FILE
          echo "" >> $CHANGESET_FILE
          if [ -n "$DEP_PREV_VERSION" ] && [ -n "$DEP_NEW_VERSION" ]; then
            UPDATE_STRING="dependabot: update $DEP_NAME from $DEP_PREV_VERSION to $DEP_NEW_VERSION"
          else
            UPDATE_STRING="dependabot: update $DEP_NAME"
          fi
          echo "$UPDATE_STRING" >> $CHANGESET_FILE
          # append output - json array of created or updated changeset files
          changesets_json=$(echo $changesets_json | jq --arg file $CHANGESET_FILE '. + [$file]')
        done
        changesets_json=$(echo $changesets_json | jq -c '.')
        echo "changesets-json=$changesets_json" >> $GITHUB_OUTPUT
